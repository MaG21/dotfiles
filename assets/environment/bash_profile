# Config

source "$HOME/.git-prompt.sh"
export PS1="\[$(tput setaf 7)\]\$(__git_ps1) \[$(tput bold)\]\[$(tput setaf 4)\][\[$(tput setaf 3)\]\u\[$(tput setaf 2)\] ->\[$(tput setaf 1)\] \j \[$(tput setaf 7)\]\W\[$(tput setaf 4)\]]\[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]"

export EDITOR=vim
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export BUNDLE_JOBS=4
export PATH=/opt/homebrew/bin:$PATH
export PATH=/opt/homebrew/sbin:$PATH

export BASH_SILENCE_DEPRECATION_WARNING=1
export HOMEBREW_NO_ANALYTICS=1    # NO Google Analytics, thanks!

# CUSTOM
export D="${HOME}/Downloads"

# NOTE that the following functions will be available as commands once installed.

# recursively list files (consider using tree if no filter is applied)
# Example, recusively list every ruby file, ie $ filenames "*.rb"
# maybe you may want to pass a find criteria ie, list ruby and python files. $ filenames '*.rb' -or -iname '*.py'
filenames() {
        if [ "$#" -eq 0 ] ; then
                find . -type f
        elif [ "$#" -eq 1 ]; then
                find . -type f -iname "$1"
        else
                find . -type f -iname "$1" "${@:2}"
        fi
}

# useful to text inside a directory full of files
# Search foobar inside every ruby file, ie : $ fkeyword "*.rb" foobar
fkeyword() {
        if [ "$#" -eq 0 ] ; then
                echo "Missing arguments";
                echo "fkeyword <KEYWORD> [OPTIONS]"
                return 1
        fi

        if [ "$#" -eq 1 ]; then
                find . -type f -iname "*.py" -exec grep -n -E --color=auto -C3 -i "$1" {} +;

        elif [ "$#" -gt 1 ]; then
                array="${@:1:$(($#-1))}"
                keyword="${@: -1}"

                find . -type f -iname "${array[@]}" -exec grep -n -E --color=auto -C3 -i "$keyword" {} +;
        fi

        return 0
}

# Run a http server in current directory or use directory specified as first argument
run-http-server() {
        if [ $# -eq 1 ]; then
                ruby -rwebrick -e"WEBrick::HTTPServer.new(:Port => 8000, :DocumentRoot => '$1').start"
        elif [ $# -eq 0 ]; then
                ruby -rwebrick -e'WEBrick::HTTPServer.new(:Port => 8000, :DocumentRoot => Dir.pwd).start'
        fi
}

# NOTE: Most of the time when I copy the path of a directory, I'm planning on
#       doing something there, usually, to open a new terminal in said
#       directory, so I will save myself the trouble of this repetitive task.
#
# Check if the content of the clipboard is a directory,
# if it is, cd to said directory.  MAC only :grin:

if type pbpaste &> /dev/null; then
	CLIPBOARD=$(pbpaste)
	if [ -d "$CLIPBOARD" ]; then
		cd "$CLIPBOARD"
	fi
fi

# Set Vim mode
set -o vi
bind "รท":vi-movement-mode

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Useful aliases
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ls="ls -F -G"
alias rm="rm -i"

alias copycwd="pwd | tr -d '\n' | pbcopy"
alias commit="vim +Git +on"

# PyEnv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

# rbenv
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
