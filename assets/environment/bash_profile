# Config

source "$HOME/.git-prompt.sh"
export PS1="\[$(tput setaf 7)\]\$(__git_ps1) \[$(tput bold)\]\[$(tput setaf 4)\][\[$(tput setaf 3)\]\u\[$(tput setaf 2)\] ->\[$(tput setaf 1)\] \j \[$(tput setaf 7)\]\W\[$(tput setaf 4)\]]\[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]"

export EDITOR=vim
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export BUNDLE_JOBS=4
export PATH=/opt/homebrew/bin:$PATH
export PATH=/opt/homebrew/sbin:$PATH

export BASH_SILENCE_DEPRECATION_WARNING=1
export HOMEBREW_NO_ANALYTICS=1    # NO Google Analytics, thanks!

# CUSTOM
export D="${HOME}/Downloads"

# NOTE that the following functions will be available as commands once installed.

# recursively list files (consider using tree if no filter is applied)
# Example, recusively list every ruby file, ie $ filenames "*.rb"
# maybe you may want to pass a find criteria ie, list ruby and python files. $ filenames '*.rb' -or -iname '*.py'
filenames() {
        if [ "$#" -eq 0 ] ; then
                find . -type f
        elif [ "$#" -eq 1 ]; then
                find . -type f -iname "$1"
        else
                find . -type f -iname "$1" "${@:2}"
        fi
}

# useful to text inside a directory full of files
# Search foobar inside every ruby file, ie : $ fkeyword "*.rb" foobar
# TODO: use find . | grep 'filter file' | xargs
fkeyword() {
	usage() {
	  printf "
  Recursively search files

  usage: fkeyword [FILE PATTERN] <REGEX|KEYWORD> [OPTIONS]

    PATTERN OPTIONS
     -rb			Ruby files of extensions. rb, erb
     -py			Python files of extension. py
     -js			JavaScript files of extension. js
     -c				C files of extensions. c, h
     -json			JSON files of extension. json
     -yml			YAML files of extension. yml

    GREP OPTIONS
    -v				Invert match.
    -I, --case-sensitive	Case sensitive search.

    GENERAL
    -h, --help			Show this help.
	  "
	  echo
	}

        if [ "$#" -eq 0 ] ; then
		usage
                return 1
        fi

	grep_case_option="-i" # default case-insensitive
	grep_match_type=
	patterns=()
	param1=
	param2=
	count=0
	while [ $# -gt 0 ]; do
		case $1 in
			-rb )
				patterns+=('-iname "*.rb" -o -iname "*.erb"')
				;;
			-py )
				patterns+=('-iname "*.py"')
				;;
			-js )
				patterns+=('-iname "*.js" -o -iname "*.ts"')
				;;
			-json )
				patterns+=('-iname "*.json"')
				;;
			-yml )
				patterns+=('-iname "*.yml"')
				;;
			-sh )
				patterns+=('-iname "*.sh"')
				;;
			-c )
				patterns+=("-iname '*.[ch]'")
				;;
			-I | --case-sensitive )
				grep_case_option=""
				;;
			-v | --invert-match )
				grep_match_type="-v"
				;;
			-h | --help )
				usage
				return 0
				;;
			-* )
				echo "Unknown option: $1"
				usage
				return 1
				;;
			* )	if [ $count -eq 0 ]; then
					param1=$1
					((count++))
				elif [ $count -eq 1 ]; then
					param2=$1
					((count++))
				else
					echo "Error: Wrong invocation"
					usage
					return 1
				fi
		esac
		shift
	done

	keyword=
	if [ $count -eq 0 ]; then
		echo "Missing regex/keyword"
		usage
	elif [ $count -eq 1 ]; then
		keyword=$param1
	elif [ $count -eq 2 ]; then
		keyword=$param2
		patterns+=("-iname '$param1'")
	fi

	# if a pattern was not provided, use default
	if [ ${#patterns[@]} -eq 0 ]; then
		# by default -py and -rb options are enabled
		patterns+=('-iname "*.py" -o -iname "*.rb" -o -iname "*.erb"')
	fi

	# -s: silent warning
	# -H: show filename
	# -n: show lines number
	# -E: Extended regular expressions
	# -C3: Get context around match, 3 lines around match
	default_grep_options="-s -H -n -E --color=auto -C3"
	grep_options="$default_grep_options $grep_match_type $grep_case_option"

	prune="-type d -name '*/node_modules' -prune -o -type d -name '*/.git' -prune -o -type d -name '*/__pycache__' -prune"

	separator=" -o "
	criteria="$( printf "${separator}%s" "${patterns[@]}" )"
	criteria="${criteria:${#separator}}" # remove leading separator

	eval "find . \( ${prune} -o ${criteria} \) -type f -exec grep ${grep_options} \"$keyword\" {} \+"

        return 0
}

# Run a http server in current directory or use directory specified as first argument
run-http-server() {
        if [ $# -eq 1 ]; then
                ruby -rwebrick -e"WEBrick::HTTPServer.new(:Port => 8000, :DocumentRoot => '$1').start"
        elif [ $# -eq 0 ]; then
                ruby -rwebrick -e'WEBrick::HTTPServer.new(:Port => 8000, :DocumentRoot => Dir.pwd).start'
        fi
}

# NOTE: Most of the time when I copy the path of a directory, I'm planning on
#       doing something there, usually, to open a new terminal in said
#       directory, so I will save myself the trouble of this repetitive task.
#
# Check if the content of the clipboard is a directory,
# if it is, cd to said directory.  MAC only :grin:

if type pbpaste &> /dev/null; then
	CLIPBOARD=$(pbpaste)
	if [ -d "$CLIPBOARD" ]; then
		cd "$CLIPBOARD"
	fi
fi

# Set Vim mode
set -o vi
bind "รท":vi-movement-mode

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Useful aliases
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ls="ls -F -G"
alias rm="rm -i"

alias copycwd="pwd | tr -d '\n' | pbcopy"
alias commit="vim +Git +on"

# PyEnv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

# rbenv
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
